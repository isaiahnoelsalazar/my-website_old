name: publish nuget
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'
  release:
    types:
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget/output

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
    - name: test action
      id: get-version
      uses: beaconbrigade/package-json-version@v0.3.2
      with:
        path: .
    - run: |
          $versionString = "${{ steps.get-version.outputs.version }}"
          $versionParts = $versionString -split '\.'
          $lastPart = [int]$versionParts[-1]
          $lastPart++
          $versionParts[-1] = $lastPart
          $newVersionString = $versionParts -join '.'
          foreach($file in (Get-ChildItem "${{ github.workspace }}/nuget" -Recurse -Include *.csproj)) {
              dotnet pack $file --configuration Release --output ${{ env.NuGetDirectory }} -p:PackageVersion=${{ steps.get-version.outputs.version }}
          }
    - uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  validate_nuget:
    runs-on: ubuntu-latest
    needs: [ create_nuget ]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

  run_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
    - name: Run tests
      run: |
          foreach($file in (Get-ChildItem "${{ github.workspace }}/nuget" -Recurse -Include *.csproj)) {
              dotnet test $file --configuration Release
          }

  deploy:
    runs-on: ubuntu-latest
    needs: [ validate_nuget, run_test ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Prep packages
        run: dotnet nuget add source --username saiaaaaaaa --password ${{ secrets.NUGET_PACKAGE_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/saiaaaaaaa/index.json"
      - name: Push package to GitHub packages
        run: dotnet nuget push ${{ env.NuGetDirectory }}/*.nupkg --api-key ${{ secrets.NUGET_PACKAGE_TOKEN }}  --source "github" --skip-duplicate
      - name: Push package to nuget.org
        run: dotnet nuget push ${{ env.NuGetDirectory }}/*.nupkg --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
